#!/bin/sh
#
# Run a system backup.
# Designed with the idea that you will perform a full backup once a week and
# incremental backups the rest of the week.  The script assumes you are
# performing an incremental backup.  You must pass --full to start a full
# backup.  After running a full backup, you may recycle your incremental tape
# library.
#
# Example backup rotation schedule:
#
#     SUN    MON    TUE    WED    THU    FRI    SAT
#            A      1      2      3      4      5
#     6      B      1      2      3      4      5
#     6      C      1      2      3      4      5
#     6      D      1      2      3      4      5
#     6      A
#
# The lettered tapes are full backups, the numbered tapes are incremental.
# This schedule can scale to an arbitrary number of weeks as necessary.
#
# NOTE:  Loss of the listed incremental status file in $TARDB (set in the
# the backup.conf file) will trigger a new full backup, in which case the
# schedule should be altered and the full backup rotation day shifted.
#
# BUGS:  1) This script should not be written in shell.
#        2) Should use a more efficient backup rotation scheme.
#        3) Should allow for site-specific settings in a config file?
#
# Copyright (C) 2010-2012 David Cantrell <david.l.cantrell@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# ChangeLog:
# v0.6    25-Apr-2012    Change new-volume script to eject tape and prompt
#                        for new tape, correctly redirect stderr and stdout
#                        in the actual tar command.
# v0.5    22-Apr-2012    Move settings to ~/.backuprc or /etc/backup.conf
#                        Create a new volume script for GNU tar.
# v0.4    24-Jul-2011    Exclude more files, duplicate stderr so it goes
#                        to a log and the console.
# v0.3    05-Mar-2011    Remove tape length override ($TAPELEN).
# v0.2    05-Mar-2011    Do not remove $LISTED_INCR for additional runtar
#                        calls.
# v0.1    04-Mar-2011    Initial revision.
#

VER="0.7"

# Defaults

CONFDIR=/etc/backup
TARDB=/var/db/tar

# Common settings

[ -r ${CONFDIR}/backup.conf ] && . ${CONFDIR}/backup.conf

# Create the new volume helper script for GNU tar
# Comes from the GNU tar manual:
# http://www.gnu.org/software/tar/manual/html_section/Using-Multiple-Tapes.html
create_new_volume_script() {
    nv="${1}"
    [ -z "${nv}" ] && exit 1

    # assume we already have the script if this file exists and is executable
    [ -x ${nv} ] && return

    echo "#!/bin/sh" > ${nv}
    echo "mt -f ${TAPEDEV} eject" >> ${nv}
    echo "echo" >> ${nv}
    echo "echo -n \"Now insert the next tape and press enter...\"" >> ${nv}
    echo "read JUNK" >> ${nv}
    echo "mt -f ${TAPEDEV} erase 0 && mt -f ${TAPEDEV} rewind" >> ${nv}
    chmod +x ${nv}
}

ver() {
    echo "${PROG} version ${VER}"
}

usage() {
    ver
    echo "Usage: ${PROG} [options]"
    echo "Options:"
    echo "    -f, --full            Perform a new full backup."
    echo "    -d, --delta           Perform a backup of changes since the last full"
    echo "                          backup."
    echo "    -s SET, --set SET     Use backup configuration SET."
    echo "    -D DEV, --device DEV  Use tape device DEV."
    echo "    -h, --help            Display usage screen."
    echo "    -V, --version         Display version information."
    echo
    echo "The -f and -d options are mutually exclusive, the last one specified takes"
    echo "precedence."
    echo
    echo "The -s option is required.  The backup set configuration should be defined"
    echo "in ${CONFDIR}/sets/SET.conf.  The -D option is not required but should"
    echo "either be specified on the command line or in the main"
    echo "${CONFDIR}/backup.conf file as TAPEDEV."
}

# Run the tar backup.  Arguments:
#     $1   type (either Full or Delta)
#     $2   tape needed (automatically determined, or specify a name)
#     $3   include list (if empty, uses $BACKUP_INCLUDE)
#     $4   exclude list (if empty, uses $BACKUP_EXCLUDE)
runtar() {
    t="${1}"
    NEEDED_TAPE="${2}"
    TARARGS=
    [ -z "${3}" ] && INCLUDES="${BACKUP_INCLUDE}" || INCLUDES="${3}"
    [ -z "${4}" ] && EXCLUDES="${BACKUP_EXCLUDE}" || EXCLUDES="${4}"

    # generate an exclude list
    EXCLUDE_LIST="$(mktemp -t exclude-list.XXXXXXXXXX)"

    # exclude our GNU tar incremental state file
    echo "${LISTED_INCR}" > ${EXCLUDE_LIST}

    # exclude mkfifo(1) FIFO socket files
    find /var -type s >> ${EXCLUDE_LIST}

    # exclude specific items listed in this script
    for entry in ${EXCLUDES} ; do
        echo "${entry}" >> ${EXCLUDE_LIST}
    done

    echo
    echo "Insert tape \"${t} ${NEEDED_TAPE}\""
    echo -n "Press Enter to begin ${t} backup for ${SET} on ${STAMP}..."
    read JUNK

    if [ "${t}" = "Full" ]; then
        echo
        echo -n ">>> Forcing full backup by removing listed incremental db..."
        rm -f ${LISTED_INCR} ${CURR_INCR_TAPE}
        echo "done."
    fi

    echo
    echo -n ">>> Erasing tape \"${t} ${NEEDED_TAPE}\"..."
    # Perform a short erase using mt.  The secret is the extra '0' argument.
    mt -f ${TAPEDEV} erase 0 || exit 1
    mt -f ${TAPEDEV} rewind || exit 1
    ## Perform a short erase using dd.  The mt erase takes way too long.
    #dd if=/dev/zero of=${TAPEDEV} bs=512 count=1 >/dev/null 2>&1
    #mt -f ${TAPEDEV} rewind || exit 1
    echo "done."

    echo
    echo ">>> Running tar..."
    TAR="tar -c -v -M -F ${TARDB}/new-volume -f ${TAPEDEV} -g ${LISTED_INCR}"
    TAR="${TAR} -X ${EXCLUDE_LIST} --totals=SIGUSR1 ${INCLUDES}"
    ((( ${TAR} 2>&1 1>&3 | tee ${TARDB}/tar.stderr ) 3>&1 1>&2 | \
        tee ${TARDB}/tar.stdout ) 2>&1 | tee ${TARDB}/tar.log ) || exit 1
    rm -f ${EXCLUDE_LIST}

    echo
    echo -n ">>> Recording current tape in use..."
    echo "${NEEDED_TAPE}" > ${CURR_FILE}
    echo "done."

    echo
    echo -n ">>> Ejecting tape \"${t} ${NEEDED_TAPE}\"..."
    mt -f ${TAPEDEV} eject || exit 1
    echo "done."
}

### MAIN ###

PATH=/bin:/sbin:/usr/bin:/usr/local/bin
PROG="$(basename ${0} 2>/dev/null)"
STAMP="$(date +%d-%b-%Y)"
TYPE=
SET=

if [ $(id -u) -ne 0 ]; then
    echo "You must be root to perform useful backups." >&2
    exit 1
fi

# Process command line arguments
OPTS=$(getopt -o fds:D:hV --long full,delta,set:,device:,help,version -n '${PROG}' -- "$@")

if [ $? -ne 0 ]; then
    echo "Terminating..." >&2
    exit 1
fi

eval set -- "${OPTS}"

while true ; do
    case "${1}" in
        -f|--full)
            TYPE="Full"
            shift ;;
        -d|--delta)
            TYPE="Delta"
            shift ;;
        -s|--set)
            SET="${2}"
            shift 2 ;;
        -D|--device)
            TAPEDEV="${2}"
            shift 2 ;;
        -h|-?|--help)
            usage
            exit 0 ;;
        -V|--version)
            ver
            exit 0 ;;
        *)
            echo "Invalid option: ${1}" >&2
            exit 1 ;;
    esac
done

# Exit if the user failed to specify a backup set
if [ -z "${SET}" -o ! -f "${CONFDIR}/sets/${SET}.conf" ]; then
    echo "ERROR:  The -s option is required, please specify a set." >&2
    exit 1
fi

# Source the set configuration and extend TARDB
. "${CONFDIR}/sets/${SET}.conf"
TARDB="${TARDB}/${SET}"
[ -d "${TARDB}" ] || mkdir -p "${TARDB}"

# Set-specific settings
LISTED_INCR="${TARDB}/listed-incremental.$(hostname 2>/dev/null)"
CURR_DELTA_TAPE="${TARDB}/curr_delta_tape"
CURR_FULL_TAPE="${TARDB}/curr_full_tape"

# Determine the type if the user did not specify one
if [ -z "${TYPE}" -a ! -f "${LISTED_INCR}" ]; then
    TYPE="Full"
fi

# Make sure we have a tape device specified
if [ -z "${TAPEDEV}" ]; then
    echo "ERROR:  No tape device specified." >&2
    exit 1
fi

if [ ! -c "${TAPEDEV}" ]; then
    echo "ERROR:  ${TAPEDEV} is not a character device." >&2
    exit 1
fi

# Support files
create_new_volume_script ${TARDB}/new-volume
rm -f ${TARDB}/start ${TARDB}/finish
date > ${TARDB}/start

# Determine the tape to start with
if [ "${TYPE}" = "Full" ]; then
    CURR_FILE="${CURR_FULL_TAPE}"

    if [ -f "${CURR_FULL_TAPE}" ]; then
        curr="$(cat ${CURR_FULL_TAPE} | tr -d "\n" | od -An -t dC)"
        max="$(echo "${MAX_FULL_VOL}" | tr -d "\n" | od -An -t dC)"

        if [ "${curr}" = "${max}" ]; then
            NEEDED_TAPE="${MIN_FULL_VOL}"
        else
            next="$(expr ${curr} + 1)"
            NEEDED_TAPE="$(awk -v char=${next} 'BEGIN { printf "%c\n", char; exit }')"
        fi
    else
        NEEDED_TAPE="${MIN_FULL_VOL}"
    fi
elif [ "${TYPE}" = "Delta" ]; then
    CURR_FILE="${CURR_INCR_TAPE}"

    if [ -f "${CURR_INCR_TAPE}" ]; then
        NEEDED_TAPE="$(expr $(cat ${CURR_INCR_TAPE}) + 1)"
    else
        NEEDED_TAPE="1"
    fi
fi

# Run the backup
stinit
runtar ${t} ${NEEDED_TAPE}
date > ${TARDB}/finish
